{"version":3,"sources":["session.js"],"names":[],"mappings":"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","file":"session.js","sourcesContent":["'use strict';\n\nimport session from 'koa-generic-session';\nimport redis from 'koa-redis';\nimport pg from 'koa-pg-session';\n\n// Flash variable middleware\nfunction flash(opts) {\n  opts = opts || {};\n  let key = opts.key || 'koa-flash';\n  let defaultValue = opts.defaultValue || {};\n\n  return function *(next) {\n    if (this.session === undefined) throw new Error('koa-flash requires the koa-session middleware.');\n    Object.defineProperty(this, 'flash', {\n      enumberable : true,\n      get: () => {\n        let data = this.session[key] || defaultValue;\n        delete this.session[key];\n        return data;\n      },\n      set: (val) => {\n        this.session[key] = val;\n      }\n    });\n\n    yield *next;\n  }\n}\n\nfunction pgStore(app) {\n  let conf = app.conf;\n  let username = conf['session database username'] || 'username';\n  let password = conf['session database password'] || 'password';\n  let host = conf['session host'] || 'localhost';\n  let port = conf['session port'] || 5432;\n  let database = conf['session database name'] || 'naws_session';\n  let store = new pg(`postgres://${username}:${password}@${host}:${port}/${database}`);\n\n  // TODO: this doesn't work properly, need to figure out why\n  return session({ store : store });\n}\n\nfunction redisStore(app) {\n  let conf = app.conf;\n  let password = conf['session database username'];\n  let host = conf['session host'];\n  let port = conf['session port'];\n  let store = redis({\n    host : host || 'localhost',\n    port : port || 6379\n  });\n\n  if (password) {\n    store = store.auth(password, (err) => {if (err) { return app.emit('error', err); }});\n  }\n\n  return session({ store : store });\n}\n\nfunction sessionify(app) {\n  let conf = app.conf;\n  app.keys = ['naws'];\n\n  switch(conf['session store']) {\n    case 'redis':    \n      app.use(redisStore(app));\n      app.emit('trace', 'using redis memory session store');\n      break;\n\n    case 'postgres':\n    case 'postgresql':\n    case 'pg':\n      app.use(pgStore(app));\n      app.emit('trace', 'using postgresql memory session store');\n      break;\n\n    case 'memory':\n    default:\n      app.use(session());\n      app.emit('trace', 'using memory sessions store');\n      break;\n  }\n\n  app.use(flash());\n  return app;\n}\n\nexport default sessionify;"],"sourceRoot":"/source/"}